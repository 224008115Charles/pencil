commit 3deb4999543c38ad2a0b86863cfb48d645e18208
Author: Chi Cuong <cuong@localhost.localdomain>
Date:   Wed Apr 27 11:06:42 2016 +0700

     add export shape as png and export page as png

diff --git a/views/CanvasMenu.js b/views/CanvasMenu.js
index dddc5e4..5434629 100644
--- a/views/CanvasMenu.js
+++ b/views/CanvasMenu.js
@@ -222,6 +222,16 @@ CanvasMenu.prototype.setup = function () {
         }
     });
 
+    UICommandManager.register({
+        key: "exportSelectionAsPNGButton",
+        label: "Export selection as PNG...",
+        isAvailable: function () { return thiz.canvas.currentController},
+        run: function () {
+            Pencil.controller.rasterizeSelection();
+        },
+        shortcut: "Ctrl+Alt+E"
+    });
+
 
     this.register(UICommandManager.getCommand("undoCommand"));
     this.register(UICommandManager.getCommand("redoCommand"));
@@ -266,6 +276,7 @@ CanvasMenu.prototype.setup = function () {
     this.register(UICommandManager.getCommand("copyCommand"));
     this.register(UICommandManager.getCommand("pasteCommand"));
     this.register(UICommandManager.getCommand("selectAllCommand"));
+    this.register(UICommandManager.getCommand("exportSelectionAsPNGButton"));
 
     this.separator();
 
@@ -279,7 +290,6 @@ CanvasMenu.prototype.setup = function () {
 
     this.separator();
     this.register(UICommandManager.getCommand("sizingPolicyCommand"));
-
     // <menuseparator/>
 
     // this.register({
diff --git a/views/CollectionPane.js b/views/CollectionPane.js
index 83a16f9..d674b11 100644
--- a/views/CollectionPane.js
+++ b/views/CollectionPane.js
@@ -38,6 +38,7 @@ function CollectionPane() {
         event.dataTransfer.setDragImage(thiz.dndImage, 8, 8);
         event.target.collection = def;
 
+
     });
 
 
diff --git a/views/FileToolbar.js b/views/FileToolbar.js
index 22de720..02692d5 100644
--- a/views/FileToolbar.js
+++ b/views/FileToolbar.js
@@ -43,23 +43,6 @@ FileToolbar.prototype.registerCommands = function () {
         },
         shortcut: "Ctrl+Shift+S"
     });
-    UICommandManager.register({
-        key: "exportPageAsPNGButton",
-        label: "Export page as PNG...",
-        isValid: function () { return true; },
-        run: function () {
-            Pencil.controller.rasterizeCurrentPage();
-        },
-        shortcut: "Ctrl+E"
-    });
-    UICommandManager.register({
-        key: "exportSelectionAsPNGButton",
-        label: "Export selection as PNG...",
-        isValid: function () { return true; },
-        run: function () {
-            Pencil.controller.rasterizeSelection();
-        },
-        shortcut: "Ctrl+Alt+E"
-    });
+    
 
 };
diff --git a/views/MainMenu.js b/views/MainMenu.js
index 06c1b1b..1859c8e 100644
--- a/views/MainMenu.js
+++ b/views/MainMenu.js
@@ -11,25 +11,6 @@ MainMenu.prototype.getTemplatePath = function () {
 };
 
 MainMenu.prototype.setup = function () {
-    UICommandManager.register({
-        key: "aboutDialogCommand",
-        label: "About Pencil",
-        icon: "info",
-        isValid: function () { return true; },
-        run: function () {
-            var dialog = new AboutDialog();
-            dialog.open();
-        }
-    });
-
-    UICommandManager.register({
-        key: "settingAllCommand",
-        label: "Setting...",
-        icon: "settings",
-        isValid: function () { return true; },
-        run: function () {
-        }
-    });
 
     var thiz = this;
     var createRecentSubMenuElement = function(fileName) {
@@ -67,18 +48,33 @@ MainMenu.prototype.setup = function () {
         checkRecentButton = true;
     }
 
-    var ui = UICommandManager.getCommand("RecentFileCommand");
-    ui.isEnabled = function () { return checkRecentButton };
-    ui.type = "SubMenu";
-    ui.subItems = thiz.itemRecentFile;
-    // Register button
     this.register(UICommandManager.getCommand("newDocumentCommand"));
     this.register(UICommandManager.getCommand("openDocumentCommand"));
     this.register(UICommandManager.getCommand("saveDocumentCommand"));
     this.register(UICommandManager.getCommand("saveAsDocumentCommand"));
     this.separator();
-    this.register(UICommandManager.getCommand("RecentFileCommand"));
+    this.register({
+        key: "RecentFileCommand",
+        label: "Recent files ",
+        isEnabled: function () { return checkRecentButton },
+        type: "SubMenu",
+        subItems: thiz.itemRecentFile,
+    });
     this.separator();
-    this.register(UICommandManager.getCommand("settingAllCommand"));
-    this.register(UICommandManager.getCommand("aboutDialogCommand"));
+    this.register({
+        key: "settingAllCommand",
+        label: "Setting",
+        isValid: function () { return true; },
+        run: function () {
+        }
+    });
+    this.register({
+        key: "aboutDialogCommand",
+        label: "About...",
+        isValid: function () { return true; },
+        run: function () {
+            var dialog = new AboutDialog();
+            dialog.open();
+        }
+    });
 }
diff --git a/views/Menu.js b/views/Menu.js
index 223a8a4..e5a335f 100644
--- a/views/Menu.js
+++ b/views/Menu.js
@@ -41,99 +41,10 @@ function Menu() {
     }, false);
     this.checkOpenSub = false;
     this.bind("mouseover", this.handleMouseIn, this.popupContainer);
-    this.registerCommand();
 
 }
 __extend(Popup, Menu);
 
-Menu.prototype.registerCommand = function() {
-    // page menu Command
-    UICommandManager.register({
-        key: "PageMenuDivitor",
-        getLabel: function () { return "" },
-        isValid: function () { return true },
-        run: function () {
-        }
-    });
-
-    UICommandManager.register({
-        key: "PageNewPage",
-        icon: "add",
-        getLabel: function () { return "New Page " },
-        isValid: function () { return true },
-    });
-
-    UICommandManager.register({
-        key: "PageDuplicate",
-        icon: "content_copy",
-        getLabel: function () { return "Duplicate" },
-        isValid: function () { return true },
-    });
-
-    UICommandManager.register({
-        key: "PageDelete",
-        icon : "remove",
-        getLabel: function () { return "Delete" },
-        isValid: function () { return true }
-    });
-
-    UICommandManager.register({
-        key: "PageMoveLeft",
-        icon: "keyboard_arrow_left",
-        getLabel: function () { return "Move Left" },
-        isValid: function () { return true },
-    });
-
-    UICommandManager.register({
-        key: "PageMoveRight",
-        icon: "keyboard_arrow_right",
-        getLabel: function () { return "Move Right" },
-        isValid: function () { return true },
-    });
-
-    UICommandManager.register({
-        key: "PageProperties",
-        getLabel: function () { return "Properties" },
-        isValid: function () { return true }
-    });
-
-    UICommandManager.register({
-        key: "PageEditPageNode",
-        getLabel: function () { return "Edit Page Note..." },
-        isValid: function () { return true }
-    });
-
-    UICommandManager.register({
-        key: "GotoNode",
-        getLabel: function () { return "Go to" }
-    });
-    // Main menu Command
-
-    UICommandManager.register({
-        key: "aboutDialogCommand",
-        label: "About...",
-        isValid: function () { return true; },
-        run: function () {
-            var dialog = new AboutDialog();
-            dialog.open();
-        }
-    });
-
-    UICommandManager.register({
-        key: "settingAllCommand",
-        label: "Setting",
-        isValid: function () { return true; },
-        run: function () {
-        }
-    });
-
-    UICommandManager.register({
-        key: "RecentFileCommand",
-        label: "Recent files "
-    });
-
-}
-
 Menu.prototype.hideCurrentSubMenu = function () {
     if (this.currentItemNodeWithSubMenu) {
         Dom.removeClass(this.currentItemNodeWithSubMenu, "Active");
diff --git a/views/PageDetailDialog.js b/views/PageDetailDialog.js
index 809256f..79f176a 100644
--- a/views/PageDetailDialog.js
+++ b/views/PageDetailDialog.js
@@ -218,9 +218,7 @@ PageDetailDialog.prototype.setup = function (options) {
     }
     for(var i in pages) {
         if (!pages[i].parentPage ) {
-            if(pages[i] != thiz.defaultPage) {
-                 conditionBackground(pages[i], null);
-            }
+            conditionBackground(pages[i], null);
             if (pages[i].children) {
                 createComboitems(pages[i].children, conditionBackground, 0);
             }
@@ -238,8 +236,6 @@ PageDetailDialog.prototype.setup = function (options) {
     }
     var background = thiz.backgroundCombo.getSelectedItem();
     thiz.colorButton.disabled = background.value ? true : false;
-
-    //this.oldBody = this.dialogBody;
 };
 
 PageDetailDialog.prototype.setPageItem = function (page) {
diff --git a/views/PageMenu.js b/views/PageMenu.js
index a18b1a3..95400b0 100644
--- a/views/PageMenu.js
+++ b/views/PageMenu.js
@@ -14,99 +14,85 @@ PageMenu.prototype.getTemplatePath = function () {
 PageMenu.prototype.setup = function () {
     var thiz = this;
 
-    UICommandManager.getCommand("PageNewPage").run = function () {
-        var dialog = new PageDetailDialog();
-        dialog.open({
-            onDone: function (page) {
-                if (!page) return;
+    // page menu Command
+
+    this.register({
+        key: "PageNewPage",
+        icon: "add",
+        getLabel: function () { return "New Page " },
+        isValid: function () { return true },
+        run: function () {
+            var dialog = new PageDetailDialog();
+            dialog.open({
+                onDone: function (page) {
+                    if (!page) return;
+                    thiz.pageListView.activatePage(page);
+                }
+            });
+        }
+    });
+
+    this.separator();
+
+    this.register({
+        key: "PageDuplicate",
+        icon: "content_copy",
+        isEnabled: function () { return thiz.page },
+        getLabel: function () { return "Duplicate" },
+        isValid: function () { return true },
+        run: function () {
+            var onDone = function () {
+                return function (page) {
                 thiz.pageListView.activatePage(page);
+                }
             }
-        });
-    };
-    UICommandManager.getCommand("PageDuplicate").isEnabled = function () { return thiz.page };
-    UICommandManager.getCommand("PageDuplicate").run = function () {
-        var onDone = function () {
-            return function (page) {
-            thiz.pageListView.activatePage(page);
-            }
+            Pencil.controller.duplicatePage(thiz.page, onDone());
+        },
+    });
+
+    this.register({
+        key: "PageDelete",
+        icon : "remove",
+        getLabel: function () { return "Delete" },
+        isValid: function () { return true },
+        isEnabled: function () { return thiz.page },
+        run: function () {
+            console.log("dialog:", dialog);
+            Dialog.confirm(
+                "Are you sure you really want to delete this page?", null,
+                "Delete", function () {
+                    Pencil.controller.deletePage(thiz.page);
+                    thiz.pageListView.renderPages();
+                },
+                "Cancel"
+            )
         }
-        Pencil.controller.duplicatePage(thiz.page, onDone());
-    };
-    UICommandManager.getCommand("PageDelete").isEnabled = function () { return thiz.page };
-    UICommandManager.getCommand("PageDelete").run = function () {
-        console.log("dialog:", dialog);
-        Dialog.confirm(
-            "Are you sure you really want to delete this page?", null,
-            "Delete", function () {
-                Pencil.controller.deletePage(thiz.page);
-                thiz.pageListView.renderPages();
-            },
-            "Cancel"
-        );
-    };
-    UICommandManager.getCommand("PageMoveLeft").isEnabled = function () { return thiz.page && Pencil.controller.checkLeftRight(thiz.page, "left")};
-    UICommandManager.getCommand("PageMoveLeft").run = function () {
-        Pencil.controller.movePage(thiz.page, "left");
-    };
-    UICommandManager.getCommand("PageMoveRight").isEnabled = function () {  return thiz.page && Pencil.controller.checkLeftRight(thiz.page, "right") };
-    UICommandManager.getCommand("PageMoveRight").run = function () {
-        Pencil.controller.movePage(thiz.page, "right");
-    };
-    UICommandManager.getCommand("PageProperties").isEnabled = function () { return thiz.page };
-    UICommandManager.getCommand("PageProperties").run = function () {
-        var dialog = new PageDetailDialog();
-        dialog.title = "Edit Page Properties";
-
-        dialog.open({
-            defaultPage : thiz.page,
-            onDone: function(page) {
-                // thiz.pageListView.activatePage(page);
-            }
-        });
-    };
-    UICommandManager.getCommand("PageEditPageNode").isEnabled = function () { return thiz.page };
-    UICommandManager.getCommand("PageEditPageNode").run = function () {
-        var dialog = new EditPageNoteDialog();
-        dialog.open({
-            defaultPage : thiz.page,
-            onDone: function (editor) {
-                console.log("Complete note");
-                thiz.page.note = editor;
-            }
-        });
-    };
+    });
 
-    this.register(UICommandManager.getCommand("PageNewPage"));
-    this.separator();
-    this.register(UICommandManager.getCommand("PageDuplicate"));
-    this.register(UICommandManager.getCommand("PageDelete"));
-    this.register(UICommandManager.getCommand("PageMoveLeft"));
-    this.register(UICommandManager.getCommand("PageMoveRight"));
-    this.separator();
-    this.register(UICommandManager.getCommand("PageProperties"));
-    this.separator();
+    this.register({
+        key: "PageMoveLeft",
+        icon: "keyboard_arrow_left",
+        getLabel: function () { return "Move Left" },
+        isValid: function () { return true },
+        isEnabled: function () { return thiz.page && Pencil.controller.checkLeftRight(thiz.page, "left")},
+        run: function () {
+            Pencil.controller.movePage(thiz.page, "left");
+        },
+    });
+
+    this.register({
+        key: "PageMoveRight",
+        icon: "keyboard_arrow_right",
+        getLabel: function () { return "Move Right" },
+        isValid: function () { return true },
+        isEnabled: function () {  return thiz.page && Pencil.controller.checkLeftRight(thiz.page, "right") },
+        run: function () {
+            Pencil.controller.movePage(thiz.page, "right");
+        },
 
-    // var createGotoSubMenuElement = function(page) {
-    //     var key = page.name.split(" ").join("") + "Page" ;
-    //     var element = UICommandManager.register({
-    //         key: key,
-    //         label: page.name,
-    //         run: function () {
-    //             thiz.pageListView.activatePage(page);
-    //         }
-    //     });
-    //     var setElement = UICommandManager.getCommand(key);
-    //     return setElement;
-    // }
-    //
-    // var createGotoSubMenuItem = function() {
-    //     var elements = [];
-    //     for (var i = 0; i < Pencil.controller.doc.pages.length; i ++) {
-    //         elements.push(createGotoSubMenuElement(Pencil.controller.doc.pages[i]));
-    //     }
-    //     return elements;
-    // }
+    });
 
+    // register Goto item
     function createSubCommand (page) {
         var key = "open" + page.name +"page";
         var items = {"key": key, "item": {
@@ -160,18 +146,62 @@ PageMenu.prototype.setup = function () {
             subItems.push(item["item"]);
         }
     }
+    var check = false;
+    if (subItems.length > 0) check = true;
 
-    var createGotoButton = function() {
-        var check = false;
-        if( subItems.length > 0 ) check = true;
+    this.register({
+        key: "PageGotoNode",
+        getLabel: function () { return "Goto" },
+        isEnabled: function () { return check },
+        type: "SubMenu",
+        subItems: subItems,
+    });
+
+    this.separator();
+
+    this.register({
+        key: "PageProperties",
+        isEnabled: function () { return thiz.page },
+        getLabel: function () { return "Properties" },
+        isValid: function () { return true },
+        run: function () {
+            var dialog = new PageDetailDialog();
+            dialog.title = "Edit Page Properties";
+            dialog.open({
+                defaultPage : thiz.page,
+                onDone: function(page) {
+                }
+            });
+        },
+    });
+
+    this.register({
+        key: "exportPageAsPNGButton",
+        label: "Export page as PNG...",
+        isEnabled: function () { return thiz.page },
+        isValid: function () { return true; },
+        run: function () {
+            Pencil.controller.rasterizeCurrentPage();
+        },
+        shortcut: "Ctrl+E"
+    });
 
-        var ui = UICommandManager.getCommand("GotoNode");
-        ui.isEnabled = function () { return check };
-        ui.type = "SubMenu";
-        ui.subItems = subItems;
-    }
-    createGotoButton();
-    this.register(UICommandManager.getCommand("GotoNode"));
     this.separator();
-    this.register(UICommandManager.getCommand("PageEditPageNode"));
+
+    this.register({
+        key: "PageEditPageNode",
+        getLabel: function () { return "Edit Page Note..." },
+        isEnabled: function () { return thiz.page },
+        isValid: function () { return true },
+        run: function () {
+            var dialog = new EditPageNoteDialog();
+            dialog.open({
+                defaultPage : thiz.page,
+                onDone: function (editor) {
+                    console.log("Complete note");
+                    thiz.page.note = editor;
+                }
+            });
+        },
+    });
 }
