<Shapes xmlns="http://www.evolus.vn/Namespace/Pencil"
        xmlns:p="http://www.evolus.vn/Namespace/Pencil"
        xmlns:svg="http://www.w3.org/2000/svg"
        xmlns:xlink="http://www.w3.org/1999/xlink"
        xmlns:dc="http://purl.org/dc/elements/1.1/"
        xmlns:cc="http://web.resource.org/cc/"
        xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
        xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
        xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"

        id="Mtv.QuickCallouts"
        displayName="&displayName;"
        description="&collectionDesc;"
        author="IDSL"
        url="http://www.evolus.vn/mtv/shapes/roundedrectangular">
		<Properties>
        <PropertyGroup name="Background">
            <Property name="fillColor" displayName="&backgrcolor;" type="Color">#336699ff</Property>
        </PropertyGroup>
        <PropertyGroup name="Border">
            <Property name="strokeColor" displayName="&linecolor;" type="Color">#000000FF</Property>
            <Property name="strokeStyle" displayName="&linestyle;" type="StrokeStyle">2|</Property>
        </PropertyGroup>
        <PropertyGroup name="Text">
            <Property name="defaultTextFont" type="Font" displayName="&defaultfont;">Helvetica|normal|normal|12px</Property>
            <Property name="defaultTextColor" type="Color" displayName="&defaultextcolor;">#ffffffff</Property>
        </PropertyGroup>
    </Properties>
    <Styles>
        <Group name="Style" defaultIcon="icons://Styles/Images/default-style.png">
            <Style name="Strong" icon="icons://Styles/Images/red.png">
                <Property name="fillColor" type="Color">#ff0000ff</Property>
                <Property name="strokeColor" type="Color">#00000000</Property>
                <Property name="strokeStyle" type="StrokeStyle">2|</Property>
                <Property name="textColor" type="Color" >#ffffffff</Property>
            </Style>
            <Style name="Yellow" icon="icons://Styles/Images/yellow-border.png">
                <Property name="fillColor" type="Color" >#ffff00ff</Property>
                <Property name="strokeColor" type="Color">#000000ff</Property>
                <Property name="strokeStyle" type="StrokeStyle">2|</Property>
                <Property name="textColor" type="Color" >#000000ff</Property>
            </Style>
            <Style name="Gray" icon="icons://Styles/Images/gray-border.png">
                <Property name="fillColor" type="Color">#e3e3e3ff</Property>
                <Property name="strokeColor" type="Color">#000000ff</Property>
                <Property name="strokeStyle" type="StrokeStyle">2|</Property>
                <Property name="textColor" type="Color" >#000000ff</Property>
            </Style>
            <Style name="Magenta" icon="icons://Styles/Images/magenta.png">
                <Property name="fillColor" type="Color">#ff00ffff</Property>
                <Property name="strokeColor" type="Color">#00000000</Property>
                <Property name="strokeStyle" type="StrokeStyle">2|</Property>
                <Property name="textColor" type="Color" >#ffffffff</Property>
            </Style>
            <Style name="Blue" icon="icons://Styles/Images/blue-border.png">
                <Property name="fillColor" type="Color" >#0000ffff</Property>
                <Property name="strokeColor" type="Color">#000000ff</Property>
                <Property name="strokeStyle" type="StrokeStyle">2|</Property>
                <Property name="textColor" type="Color" >#ffffffff</Property>
            </Style>
            <Style name="Outline" icon="icons://Styles/Images/white-border.png">
                <Property name="fillColor" type="Color">#80b3ffff</Property>
                <Property name="strokeColor" type="Color">#ffffffff</Property>
                <Property name="strokeStyle" type="StrokeStyle">2|</Property>
                <Property name="textColor" type="Color" >#000000ff</Property>
            </Style>
            <Style name="Green" icon="icons://Styles/Images/green.png">
                <Property name="fillColor" type="Color">#00ff00ff</Property>
                <Property name="strokeColor" type="Color">#00000000</Property>
                <Property name="strokeStyle" type="StrokeStyle">2|</Property>
                <Property name="textColor" type="Color" >#000000ff</Property>
            </Style>
            <Style name="Empty" icon="icons://Styles/Images/empty.png">
                <Property name="fillColor" type="Color" >#00000000</Property>
                <Property name="strokeColor" type="Color">#000000ff</Property>
                <Property name="strokeStyle" type="StrokeStyle">2|</Property>
                <Property name="textColor" type="Color" >#000000ff</Property>
            </Style>
        </Group>
    </Styles>
    <Script comments="Script for creating wrapped text">
        <![CDATA[
            collection.buildTextWrapDomContent = function (textElement, text, width) {
                var lines = text.split("\n");
                var tspans = [];
                var lastHeight = 0;
                var lastLineHeight = 0;
                var lastBBoxY = 0;
                for (var j = 0; j < lines.length; j ++) {
                    var line = lines[j];
                    if (line.length == 0) {
                        lastHeight += lastLineHeight;
                        continue;
                    }
                    var words = line.split(' ');
                    var i = 0;
                    var s = "";
                    while (i < words.length) {
                        if (s.length > 0) s += " ";
                        s += words[i];

                        Dom.empty(textElement);
                        textElement.appendChild(textElement.ownerDocument.createTextNode(s));
                        var box = textElement.getBBox();
                        lastBBoxY = box.y;

                        i ++;

                        if (box.width < width) {
                            continue;
                        }

                        var index = s.lastIndexOf(" ");
                        var line = "";

                        if (index > 0) {
                            line = s.substring(0, index);
                            s = s.substring(index + 1);
                        } else {
                            line = s;
                            s = "";
                        }

                        tspans.push({
                            _name: "tspan",
                            _uri: "http://www.w3.org/2000/svg",
                            _text: line,
                            x: 0,
                            y: lastHeight - lastBBoxY
                        });

                        lastHeight += box.height;
                        lastLineHeight = box.height;

                    }
                    if (s.length > 0) {
                        tspans.push({
                            _name: "tspan",
                            _uri: "http://www.w3.org/2000/svg",
                            _text: s,
                            x: 0,
                            y: lastHeight - lastBBoxY
                        });
                        lastHeight += box.height;
                    }

                }
                var frag = Dom.newDOMFragment(tspans, textElement.ownerDocument);

                return frag;
            };
		]]>
    </Script>
	 <Script>
        <![CDATA[
            collection.calloutPoint = function(a, box) {
                var pos = F.getRelativeLocation(a, box);
                var w = box.w;
                var h = box.h;
                if (pos == "top") {
                    return a.x < w/2 ? {a: {x: w/6, y: 0}, b: {x: 4*w/10, y: 0}, t: 1} : {a: {x: 6*w/10, y: 0}, b: {x: 5*w/6, y: 0}, t: 2};
                }
                if (pos == "right") {
                    return a.y < h/2 ? {a: {x: w, y: h/6}, b: {x: w, y: 4*h/10}, t: 3} : {a: {x: w, y: 6*h/10}, b: {x: w, y: 5*h/6}, t: 4};
                }
                if (pos == "bottom") {
                    return a.x > w/2 ? {a: {x: 5*w/6, y: h}, b: {x: 6*w/10, y: h}, t: 5} : {a: {x: 4*w/10, y: h}, b: {x: w/6, y: h}, t: 6};
                }
                if (pos == "left") {
                    return a.y > h/2 ? {a: {x: 0, y: 5*h/6}, b: {x: 0, y: 6*h/10}, t: 7} : {a: {x: 0, y: 4*h/10}, b: {x: 0, y: h/6}, t: 8};
                }
                return null;
            };
        ]]>
    </Script>
	<Shape id="callout" displayName="&accident;" icon="Icons/accident.png">
        <Properties>
			<PropertyGroup>
				<Property name="a" displayName="Handle" type="Handle">15,55</Property>
				<Property name="box" displayName="&box;" type="Dimension">80,40</Property>
			</PropertyGroup>
			<PropertyGroup name="&shape;">
				<Property name="fillColor" displayName="&backgrcolor;" type="Color"><E>$$fillColor</E></Property>
				<Property name="strokeColor" displayName="&linecolor;" type="Color"><E>$$strokeColor</E></Property>
				<Property name="strokeStyle" displayName="&linestyle;" type="StrokeStyle"><E>$$strokeStyle</E></Property>
			</PropertyGroup>
			<PropertyGroup name="&text;">
				<Property name="textContent" displayName="&textcont;" type="PlainText" >&accident;</Property>
				<Property name="textFont" displayName="&textfont;" type="Font"><E>$$defaultTextFont</E></Property>
				<Property name="textColor" displayName="&textcol;" type="Color"><E>$$defaultTextColor</E></Property>
				<Property name="textSize" displayName="&textsize;" type="Handle" p:lockX="true" p:minY="20" p:maxY="$box.h" p:constraintFunctionx="function (a, b) { return {x: 0, y: Math.round(b.y / 20) * 20}; }" p:disabled="$textContent.value ? false : true">0,25</Property>
			</PropertyGroup>
		</Properties>
		<Behaviors>
			<For ref="path">
				<Transform>[translate(($strokeStyle.w % 2) / 2, ($strokeStyle.w % 2) / 2)]</Transform>
				<StrokeColor>$strokeColor</StrokeColor>
				<StrokeStyle>$strokeStyle</StrokeStyle>
				<Fill>$fillColor</Fill>
				<D>
					var w = $box.w;
					var h = $box.h;
					var r = Math.min(w/10, h/10);
					x = [];
					var points = collection.calloutPoint($a, $box);
					if (points != null) {
						switch (points.t) {
							case 1:
							case 2:
									x = [M(r, 0), L(points.a.x, points.a.y), L($a.x, $a.y), L(points.b.x, points.b.y), L(w - r, 0),
										Q(w, 0, w, r), L(w, h - r), Q(w, h, w - r, h), L(r, h), Q(0, h, 0, h - r), L(0, r), Q(0, 0, r, 0), z];
									break;
							case 3:
							case 4:
									x = [M(r, 0), L(w - r, 0), Q(w, 0, w, r), L(points.a.x, points.a.y), L($a.x, $a.y), L(points.b.x, points.b.y),
									L(w, h - r), Q(w, h, w - r, h), L(r, h), Q(0, h, 0, h - r), L(0, r), Q(0, 0, r, 0), z];
									break;
							case 5:
							case 6:
									x = [M(r, 0), L(w - r, 0), Q(w, 0, w, r), L(w, h - r), Q(w, h, w - r, h), L(points.a.x, points.a.y),
									L($a.x, $a.y), L(points.b.x, points.b.y), L(r, h), Q(0, h, 0, h - r), L(0, r), Q(0, 0, r, 0), z];
									break;
							case 7:
							case 8:
									x = [M(r, 0), L(w - r, 0), Q(w, 0, w, r), L(w, h - r), Q(w, h, w - r, h), L(r, h), Q(0, h, 0, h - r),
									L(points.a.x, points.a.y), L($a.x, $a.y), L(points.b.x, points.b.y), L(0, r), Q(0, 0, r, 0), z];
									break;
						}
					}
					x
				</D>
			</For>
			<For ref="text">
				<Font>
					var f = Font.fromString($textFont.toString());
					f.size = ($textSize.y - 10) + "px";
					f;
				</Font>
				<Fill>$textColor</Fill>
				<DomContent>
					collection.buildTextWrapDomContent(F._target, $textContent.value, $box.w - 20);
				</DomContent>
			</For>
		</Behaviors>
		<p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil"
									xmlns="http://www.w3.org/2000/svg">
			<path id="path" style="stroke-linejoin: round;"/>
			<g transform="translate(10,10)">
				<text id="text"/>
			</g>
		</p:Content>
    </Shape>
    <Shortcut displayName="&usure;" icon="Icons/usure.png" to="callout">
        <PropertyValue name="textContent" p:readonly="true">&usure;</PropertyValue>
        <PropertyValue name="box">60,40</PropertyValue>
    </Shortcut>
    <Shortcut displayName="&usureAnormal;" icon="Icons/usureAnormal.png" to="callout">
        <PropertyValue name="textContent" p:readonly="true">&usureAnormal;</PropertyValue>
        <PropertyValue name="box">140,40</PropertyValue>
    </Shortcut>
    <Shortcut displayName="&mauvaiseInstallation;" icon="Icons/mauvaiseInstallation.png" to="callout">
        <PropertyValue name="textContent" p:readonly="true">&mauvaiseInstallation;</PropertyValue>
        <PropertyValue name="box">180,40</PropertyValue>
    </Shortcut>
    <Shortcut displayName="&reglageDefectueux;" icon="Icons/reglageDefectueux.png" to="callout">
        <PropertyValue name="textContent" p:readonly="true">&reglageDefectueux;</PropertyValue>
        <PropertyValue name="box">170,40</PropertyValue>
    </Shortcut>
    <Shortcut displayName="&regalageAFaire;" icon="Icons/regalageAFaire.png" to="callout">
        <PropertyValue name="textContent" p:readonly="true">&regalageAFaire;</PropertyValue>
        <PropertyValue name="box">140,40</PropertyValue>
    </Shortcut>
</Shapes>
